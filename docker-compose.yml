services:
  code:
    image: lscr.io/linuxserver/code-server:4.101.1
    # keep/no container_name (either is fine)
    environment:
      PUID: "1000"
      PGID: "1000"
      TZ: "America/Toronto"

      # code-server reads this on container (re)start
      FILE__PASSWORD: "/config/.gitstrap/codepass.txt"

      # optional gitstrap envs
      GH_USER: "${GH_USER}"
      GH_PAT: "${GH_PAT}"
      GIT_NAME: "${GIT_NAME}"
      GIT_EMAIL: "${GIT_EMAIL}"
      GIT_REPOS: "${GIT_REPOS}"
      GIT_BASE_DIR: "/config/workspace"

    volumes:
      - code-config:/config093
      - code-config:/config
      - projects:/config/workspace
      - ./settings.json:/config/gitstrap/settings.json:ro
      - ./gitstrap.sh:/custom-cont-init.d/10-gitstrap.sh:ro
      - ./codepass.sh:/custom-cont-init.d/20-codepass.sh:ro

    # Dokploy-style port publication (keep as you had it)
    ports:
      - ":8443"

    restart: always

  restartd:
    image: alpine:3.20
    user: "0:0"                         # needs access to docker.sock
    depends_on:
      - code
    # CRUCIAL: share the network namespace with "code"
    network_mode: "service:code"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      - /bin/sh
      - -ceu
      - |
        apk add --no-cache curl socat >/dev/null
        cat >/usr/local/bin/restart-hook <<'EOF'
        #!/usr/bin/env sh
        # read request line
        IFS= read -r req || req=""
        # eat headers
        while IFS= read -r line; do [ -z "$line" ] && break; done
        # log once
        echo "[restartd] request: ${req}" >&2
        # route: only /restart triggers a restart; /health is no-op
        case "$req" in
          *" /restart "*) action=restart ;;
          *" /health "*)  action=health  ;;
          *)              action=noop    ;;
        esac
        # respond quickly
        printf "HTTP/1.1 200 OK\r\nContent-Length: 2\r\nConnection: close\r\n\r\nOK"
        # background restart so response returns immediately
        if [ "$action" = restart ]; then
          # find the "code" service container by compose label and restart it
          cid="$(
            curl --unix-socket /var/run/docker.sock -s \
              "http://localhost/v1.41/containers/json?filters=%7B%22label%22%3A%5B%22com.docker.compose.service%3Dcode%22%5D%7D" \
            | sed -n 's/.*"Id":"\([0-9a-f]\{64\}\)".*/\1/p' | head -n1
          )"
          if [ -n "$cid" ]; then
            curl --unix-socket /var/run/docker.sock -s -o /dev/null \
              -X POST "http://localhost/v1.41/containers/${cid}/restart" || true
            echo "[restartd] restarted container $cid" >&2
          else
            echo "[restartd] WARN: could not find container with label com.docker.compose.service=code" >&2
          fi
        fi
        EOF
        chmod +x /usr/local/bin/restart-hook
        echo "[restartd] listening on 127.0.0.1:9000 (/restart to restart, /health no-op)"
        # listen inside the shared netns; suppress socket noise
        exec socat -T10 TCP-LISTEN:9000,bind=127.0.0.1,reuseaddr,fork,keepalive,crlf \
          EXEC:"/bin/sh /usr/local/bin/restart-hook",setsid,pty,stderr=0
    restart: always

volumes:
  code-config:
  projects:
